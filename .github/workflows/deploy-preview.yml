name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize]

env:
  NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  NODE_ENV: production # Ensure production optimizations
  NEXT_TELEMETRY_DISABLED: 1 # Disable telemetry

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      # Cache dependencies
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install dependencies with production flag
      - name: Install Dependencies
        run: |
          pnpm install --prod --frozen-lockfile
          pnpm add -g wrangler@3

      - name: Get Branch Name
        id: branch-name
        uses: tj-actions/branch-names@v8

      # Create Neon Branch with retry logic
      - name: Create Neon Preview Branch
        id: create-neon-branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          branch_name: preview/${{ steps.branch-name.outputs.current_branch }}
          api_key: ${{ secrets.NEON_API_KEY }}
          database: linkp-db

      # Add smart retry logic for branch creation
      - name: Wait and Verify Branch
        run: |
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -s "${{ steps.create-neon-branch.outputs.db_url_with_pooler }}" > /dev/null; then
              echo "Branch is ready"
              break
            fi
            echo "Attempt $attempt: Branch not ready, waiting..."
            sleep $((attempt * 5))
            attempt=$((attempt + 1))
          done

      # Update Environment Variables
      - name: Update Environment Variables
        run: |
          # Create consolidated env file
          cat << EOF > .env
          DATABASE_URL=${{ steps.create-neon-branch.outputs.db_url_with_pooler }}
          NODE_ENV=production
          EOF

          # Copy to specific locations
          cp .env apps/linkp-website/.env
          cp .env apps/linkp-worker/.dev.vars

      # Run migrations with verification
      - name: Run Database Migrations
        working-directory: ./apps/linkp-website
        run: |
          pnpm run db:migrate
          # Verify migrations
          pnpm run db:verify || exit 1

      # Optimized Next.js build
      - name: Build Next.js App
        working-directory: ./apps/linkp-website
        env:
          NEXT_TELEMETRY_DISABLED: 1
        run: |
          # Clear any existing cache
          rm -rf .next/cache
          # Build with production optimizations
          pnpm run build

      # Remove unnecessary files before deployment
      - name: Optimize Build Output
        working-directory: ./apps/linkp-website
        run: |
          rm -rf .next/cache
          find .next -name "*.map" -delete

      # Deploy to Cloudflare Pages with size check
      - name: Check and Deploy to Cloudflare Pages
        working-directory: ./apps/linkp-website
        run: |
          # Check file sizes
          find .next -type f -exec ls -lh {} \; | sort -rh | head -n 10

          # Deploy with wrangler
          pnpm wrangler pages deploy .next \
            --project-name linkp-website \
            --branch ${{ steps.branch-name.outputs.current_branch }} \
            --commit-dirty=true

      # Deploy Worker with environment specific config
      - name: Deploy Worker Preview
        working-directory: ./apps/linkp-worker
        run: pnpm wrangler deploy --env preview --dry-run

      # Enhanced PR Comment with more details
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = `https://preview-${context.payload.pull_request.head.ref}.linkp-website.pages.dev`;
            const deployTime = new Date().toISOString();

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üöÄ Preview Deployment Details
              
              ### üìä Deployment Information
              - **Preview URL:** ${previewUrl}
              - **Neon Branch:** preview/${context.payload.pull_request.head.ref}
              - **Deployment Time:** ${deployTime}
              
              ### üîç Environment Details
              - Database URL is configured
              - Worker deployment status: Preview
              
              ### ‚úÖ Verification Steps
              1. Check the preview URL
              2. Verify database migrations
              3. Test core functionality
              4. Check performance metrics
              
              Please test thoroughly and report any issues!`
            })
